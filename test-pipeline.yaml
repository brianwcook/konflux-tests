kind: Pipeline
apiVersion: tekton.dev/v1beta1
metadata:
  name: example-pipeline
spec:
  params:
    - description: 'Snapshot of the application'
      name: SNAPSHOT
      default: '{"components": [{"name":"test-app", "containerImage": "quay.io/example/repo:latest"}]}'
      type: string
    - description: 'Namespace where the application is running'
      name: NAMESPACE
      default: "default"
      type: string
    - description: 'Expected output'
      name: EXPECTED_OUTPUT
      default: "Hello World!"
      type: string
  tasks:
    - name: task-1
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: PLATFORM
          value: linux/amd64
      taskSpec:
        volumes:
        - name: ssh
          secret:
            optional: false
            secretName: multi-platform-ssh-$(context.taskRun.name)
        - emptyDir: {}
          name: workspace
        params:
        - name: SNAPSHOT
        results:
        - name: TEST_OUTPUT
          description: Test output
        steps:
        - name: run-test
          image: quay.io/bcook/jq-ubi9:latest
          env:
          - name: SNAPSHOT
            value: $(params.SNAPSHOT)
          script: | 
            
            # Run custom tests for the given Snapshot here
            # After the tests finish, record the overall result in the RESULT variable
            
            

            # Output the standardized TEST_OUTPUT result in JSON form
            # TEST_OUTPUT=$(jq -rc --arg date $(date +%s) --arg RESULT "${RESULT}" --null-input \
            #  '{result: $RESULT, timestamp: $date, failures: $FAILURES, successes: $SUCCESSES, warnings: 0}')
            

            echo -n "${TEST_OUTPUT}" | tee $(results.TEST_OUTPUT.path)

            #############################
            set -o verbose
            set -eu
            set -o pipefail
            mkdir -p ~/.ssh
            if [ -e "/ssh/error" ]; then
              #no server could be provisioned
              cat /ssh/error
              exit 1
            elif [ -e "/ssh/otp" ]; then
            curl --cacert /ssh/otp-ca -XPOST -d @/ssh/otp $(cat /ssh/otp-server) >~/.ssh/id_rsa
            echo "" >> ~/.ssh/id_rsa
            else
              cp /ssh/id_rsa ~/.ssh
            fi
            chmod 0400 ~/.ssh/id_rsa
            export SSH_HOST=$(cat /ssh/host)
            export BUILD_DIR=$(cat /ssh/user-dir)
            export SSH_ARGS="-o StrictHostKeyChecking=no"
            mkdir -p scripts
            echo "$BUILD_DIR"
            ssh $SSH_ARGS "$SSH_HOST"  mkdir -p "$BUILD_DIR/workspaces" "$BUILD_DIR/scripts" "$BUILD_DIR/tmp"
            echo -e local arch is: $(arch)
            echo -e remote arch is:
            ssh $SSH_ARGS "$SSH_HOST" /bin/bash -c "arch"

            # transfers data
            # rsync -ra $(workspaces.source.path)/ "$SSH_HOST:$BUILD_DIR/workspaces/source/"
            
            # write the script to disk:
            cat >scripts/script-build.sh <<'REMOTESSHEOF'
            #!/bin/bash
            set -o verbose
            echo 'script-build.sh start'
            echo -e  $(uname -m)
            
            echo running test
            if podman run --rm --entrypoint="/hello-world.sh" $IMAGE | grep -Fxq 'Hello World!'; then
              RESULT="SUCCESS"
              SUCCESSES=1
              FAILURES=0
              echo $RESULT
            else
              RESULT="FAILURE"
              SUCCESSES=0
              FAILURES=1
              echo $RESULT
            fi
            
            echo 'script-build.sh end'
            REMOTESSHEOF
            
            # make it executable
            chmod +x scripts/script-build.sh
            
            # sync scripts dir to the SSH Host
            rsync -ra scripts "$SSH_HOST:$BUILD_DIR"
            
            # for debugging
            ssh $SSH_ARGS "$SSH_HOST" /bin/bash -c "ls -alR /scripts"
            ssh $SSH_ARGS "$SSH_HOST" /bin/bash -c "cat /script/script-build.sh"
            

            echo "Snapshot:\n"
            echo ${SNAPSHOT} | jq "."
            echo "1 - works:"
            echo ${SNAPSHOT} | jq ".components"
            
            echo extracting image pullspec...
            IMAGE=$(echo ${SNAPSHOT} | jq ".components[] | select(.name==\"arm64-test-demo\")"| jq .containerImage | tr -d '"')
            echo IMAGE SPEC: $IMAGE
          

            # execute the script in a container on the SSH host
            ssh $SSH_ARGS "$SSH_HOST" podman  run \
            -e PARAM_BUILDER_IMAGE="quay.io/bcook/jq-ubi9:latest" \
            -v $BUILD_DIR/scripts:/script:Z \
            --user=0  --rm  "$BUILDER_IMAGE" /script/script-build.sh

          securityContext:
            runAsUser: 0
            capabilities:
              add:
              - SETFCAP
          volumeMounts:
          - mountPath: /ssh
            name: ssh
          - mountPath: /workspace
            name: workspace
            readOnly: true
